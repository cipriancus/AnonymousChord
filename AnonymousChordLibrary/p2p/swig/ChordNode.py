# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ChordNode')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ChordNode')
    _ChordNode = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ChordNode', [dirname(__file__)])
        except ImportError:
            import _ChordNode
            return _ChordNode
        try:
            _mod = imp.load_module('_ChordNode', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ChordNode = swig_import_helper()
    del swig_import_helper
else:
    import _ChordNode
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class contact(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, contact, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, contact, name)
    __repr__ = _swig_repr
    __swig_setmethods__["node"] = _ChordNode.contact_node_set
    __swig_getmethods__["node"] = _ChordNode.contact_node_get
    if _newclass:
        node = _swig_property(_ChordNode.contact_node_get, _ChordNode.contact_node_set)
    __swig_setmethods__["selectedNode"] = _ChordNode.contact_selectedNode_set
    __swig_getmethods__["selectedNode"] = _ChordNode.contact_selectedNode_get
    if _newclass:
        selectedNode = _swig_property(_ChordNode.contact_selectedNode_get, _ChordNode.contact_selectedNode_set)
    __swig_setmethods__["tr"] = _ChordNode.contact_tr_set
    __swig_getmethods__["tr"] = _ChordNode.contact_tr_get
    if _newclass:
        tr = _swig_property(_ChordNode.contact_tr_get, _ChordNode.contact_tr_set)
    __swig_setmethods__["queryParams"] = _ChordNode.contact_queryParams_set
    __swig_getmethods__["queryParams"] = _ChordNode.contact_queryParams_get
    if _newclass:
        queryParams = _swig_property(_ChordNode.contact_queryParams_get, _ChordNode.contact_queryParams_set)

    def __init__(self):
        this = _ChordNode.new_contact()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ChordNode.delete_contact
    __del__ = lambda self: None
contact_swigregister = _ChordNode.contact_swigregister
contact_swigregister(contact)

class ChordNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChordNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChordNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ChordNode.new_ChordNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ChordNode.delete_ChordNode
    __del__ = lambda self: None

    def setIdentifier(self, iD):
        return _ChordNode.ChordNode_setIdentifier(self, iD)

    def setTransport(self, t):
        return _ChordNode.ChordNode_setTransport(self, t)

    def sendRequest(self, request, destination):
        return _ChordNode.ChordNode_sendRequest(self, request, destination)

    def fixBrokenPointers(self, node):
        return _ChordNode.ChordNode_fixBrokenPointers(self, node)

    def isAlone(self):
        return _ChordNode.ChordNode_isAlone(self)

    def checkStable(self):
        return _ChordNode.ChordNode_checkStable(self)

    def shutDown(self):
        return _ChordNode.ChordNode_shutDown(self)

    def notify(self, n):
        return _ChordNode.ChordNode_notify(self, n)

    def stabilize(self):
        return _ChordNode.ChordNode_stabilize(self)

    def put(self, key, value):
        return _ChordNode.ChordNode_put(self, key, value)

    def get(self, key):
        return _ChordNode.ChordNode_get(self, key)

    def removekey(self, key):
        return _ChordNode.ChordNode_removekey(self, key)

    def getDataOrPrecedingNode(self, id):
        return _ChordNode.ChordNode_getDataOrPrecedingNode(self, id)

    def saveData(self, filename, value):
        return _ChordNode.ChordNode_saveData(self, filename, value)

    def openData(self, filename):
        return _ChordNode.ChordNode_openData(self, filename)

    def serializeData(self, data):
        return _ChordNode.ChordNode_serializeData(self, data)

    def unserializeData(self, data):
        return _ChordNode.ChordNode_unserializeData(self, data)

    def searchForQueryByHash(self, hash):
        return _ChordNode.ChordNode_searchForQueryByHash(self, hash)

    def getIntSHA1(self, key):
        return _ChordNode.ChordNode_getIntSHA1(self, key)

    def getHexSHA1(self, str):
        return _ChordNode.ChordNode_getHexSHA1(self, str)

    def getStartTime(self):
        return _ChordNode.ChordNode_getStartTime(self)

    def getIdentifier(self):
        return _ChordNode.ChordNode_getIdentifier(self)

    def getTransport(self):
        return _ChordNode.ChordNode_getTransport(self)

    def getFingerTable(self):
        return _ChordNode.ChordNode_getFingerTable(self)

    def getThisNode(self):
        return _ChordNode.ChordNode_getThisNode(self)

    def serialize(self, node):
        return _ChordNode.ChordNode_serialize(self, node)

    def deserialize(self, data):
        return _ChordNode.ChordNode_deserialize(self, data)

    def getQueryForHash(self, hash, query):
        return _ChordNode.ChordNode_getQueryForHash(self, hash, query)

    def getNodeForIP(self, ip):
        return _ChordNode.ChordNode_getNodeForIP(self, ip)

    def getPassedQueryForHash(self, hash):
        return _ChordNode.ChordNode_getPassedQueryForHash(self, hash)

    def addPassedQuery(self, hash, predSucc):
        return _ChordNode.ChordNode_addPassedQuery(self, hash, predSucc)

    def randomWalk(self, key):
        return _ChordNode.ChordNode_randomWalk(self, key)

    def phaseOne(self, query):
        return _ChordNode.ChordNode_phaseOne(self, query)

    def send_request_with_timeout(self, selectedNode, tr, noOfSecondsToWait, queryParams):
        return _ChordNode.ChordNode_send_request_with_timeout(self, selectedNode, tr, noOfSecondsToWait, queryParams)
    __swig_setmethods__["calculating"] = _ChordNode.ChordNode_calculating_set
    __swig_getmethods__["calculating"] = _ChordNode.ChordNode_calculating_get
    if _newclass:
        calculating = _swig_property(_ChordNode.ChordNode_calculating_get, _ChordNode.ChordNode_calculating_set)
    __swig_setmethods__["done"] = _ChordNode.ChordNode_done_set
    __swig_getmethods__["done"] = _ChordNode.ChordNode_done_get
    if _newclass:
        done = _swig_property(_ChordNode.ChordNode_done_get, _ChordNode.ChordNode_done_set)

    def itoa(self, num, str, base):
        return _ChordNode.ChordNode_itoa(self, num, str, base)

    def reverse(self, str, length):
        return _ChordNode.ChordNode_reverse(self, str, length)
ChordNode_swigregister = _ChordNode.ChordNode_swigregister
ChordNode_swigregister(ChordNode)

# This file is compatible with both classic and new-style classes.


